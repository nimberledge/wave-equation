'''Python file that loads and plots results of PDE'''
import matplotlib.pyplot as plt
import numpy as np
import sys
from PIL import Image


def get_matrix(filename, mat_size):
    '''Reads a given file and returns a matrix of mat_size'''
    retval = np.zeros(mat_size)
    with open(filename, 'r+') as in_file:
        for i in range(mat_size[0]):
            line = in_file.readline()
            retval[i, :] = [float(j) for j in line.split()]
    return retval


def get_grid_size(n):
    '''Simulates the C++ code to find the grid size for a
    given number of processes.'''
    if (n == 2):
        return (1, 2)
    for i in range(int(np.sqrt(n)) + 1, 0, -1):
        if n % i == 0:
            return (i, int(n/i))


def plot_mats(mats, grid_size, xmax, ymax, dx, dy, plt_title):
    '''Stitch matrices together for the larger plot.'''
    fig, ax = plt.subplots(1, 1)
    mat_idx = 0
    X = np.linspace(0, xmax, int(xmax/dx)+1)
    Y = np.linspace(0, ymax, int(ymax/dy)+1)
    Z = np.zeros((int(xmax/dx)+1, int(ymax/dy)+1))
    for i in range(grid_size[0]):
        for j in range(grid_size[1]):
            mat = mats[mat_idx]
            width = xmax / grid_size[1]
            height = ymax / grid_size[0]
            # Extract values from Matrix for plot
            for ii in range(mat.shape[0]):
                for jj in range(mat.shape[1]):
                    x_idx = int((width * j) / dx) + jj
                    y_idx = int((height * i) / dy) + ii
                    Z[y_idx, x_idx] = mat[ii][jj]
            mat_idx += 1
    # c = ax.pcolor(X, Y, Z, label='displacement', vmin=-0.5, vmax=0.5)
    c = ax.pcolor(X, Y, Z, label='displacement',
                  vmin=-1, vmax=1)
    # c = ax.pcolor(X, Y, Z, label='displacement')
    fig.colorbar(c, ax=ax)
    ax.set_title(plt_title)
    # plt.show()
    return fig


def get_config_params(config_file):
    '''Set up the collate script based on the same config file that the
    C++ Code used.'''
    param_cnt = 0
    xmax, ymax = 10, 10
    dx, dy = 0.05, 0.05
    output_dt = 0.5
    t_max = 30.0
    line = 'omomomo'
    with open(config_file, 'r') as in_file:
        while(len(line) > 1):
            line = in_file.readline()
            if line[0] == '#':
                continue

            if param_cnt == 0:
                xmax = float(line)
            elif param_cnt == 1:
                ymax = float(line)
            elif param_cnt == 2:
                dx = float(line)
            elif param_cnt == 3:
                dy = float(line)
            elif param_cnt == 4:
                output_dt = float(line)
            elif param_cnt == 5:
                t_max = float(line)
            param_cnt += 1

    return (xmax, ymax, dx, dy, output_dt, t_max)


def make_gif(n_frames, img_file_prefix="images/img_dump/testfig{}.png",
             gif_filename="images/img_dump/testgif.gif"):
    '''Make GIF from PNG files. '''
    frames = []
    for i in range(n_frames):
        img_filename = img_file_prefix.format(i)
        img = Image.open(img_filename)
        frames.append(img)
    print("Trying to make GIF")
    frames[0].save(gif_filename, format='GIF',
                   append_images=frames[1:], save_all=True, duration=225,
                   loop=0, interlace=False)
    print("Saved GIF to: {}".format(gif_filename))


def main():
    xmax, ymax, dx, dy, output_dt, t_max = get_config_params(
        'src/conf_file.txt')
    print("Python script starting with: xmax={}, ymax={}".format(xmax, ymax))
    print("dx={},dy={},output_dt={},t_max={}".format(dx, dy, output_dt, t_max))
    num_processes = 9
    if len(sys.argv) > 1:
        num_processes = int(sys.argv[1])
    print("num_processes={}".format(num_processes))
    grid_size = get_grid_size(num_processes)
    max_iter = int(t_max / output_dt) + 1
    img_print_interval = max_iter // 10
    img_count = 1
    for j in range(max_iter):
        iter_num = j
        file_fmt = "./data/iter_{}_thread_{}.txt"
        mat_size = (int((ymax / grid_size[0]) / dy) + 1,
                    int((xmax / grid_size[1])/dx) + 1)
        mats = []
        for i in range(num_processes):
            filename = file_fmt.format(iter_num, i)
            mat = get_matrix(filename, mat_size)
            mats.append(mat)
            # print(mat, "\n\n")
        t_current = output_dt * j
        p_title = r'Plot for $t={:.2f}$'.format(t_current)
        fig = plot_mats(mats, grid_size, xmax, ymax, dx, dy, p_title)
        fig.savefig('images/img_dump/testfig{}'.format(iter_num), dpi=100)
        plt.close(fig)
        img_count -= 1
        if (img_count == 0):
            img_count = int(img_print_interval)
            print("Saved image at : {}".format(
                'images/img_dump/testfig{}'.format(iter_num)))
    # make_gif(max_iter)
    # GIFs generated by PIL butchered the colours for some reason
    # I think between the forced interlacing and maybe a limited GIF
    # colourspace it was just a bit bad.


if __name__ == '__main__':
    main()
